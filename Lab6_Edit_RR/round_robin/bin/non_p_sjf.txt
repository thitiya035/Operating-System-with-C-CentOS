
void SJF_non_Preemp(struct Process Info[NProcess]){
	int max = 0;								// max time the process will execute
	int m;
	int Temp_PID = 0;							// to keep process in ex
	int Temp_QT = 0;							// to keep time's process in ex
	
	for(m = 1; m <= NProcess; m++){
		max += Info[m].BT;
	}

	
	int at ;
	for(at = 0; at <= max ; at ){
		
		for(int j = 1 ; j<= NProcess; j++ ){
			// push when process arrived
			if(Info[j].AT == at){								// printf("at( %d )Insert: %d\n", at, Info[j].PID);
				insertCQ(Info[j].PID);							// insert when new process is arriv
			}	
		}	
		
		// pop process when have some process in queue --
		if(DataInQueue()>=1 and Info[Temp_PID].REMAIN == 0 ){
//			printf("%3d : ",at);
			swapQ(Info);
			Temp_PID = deleteCQ();
			Info[Temp_PID].IN = at;
		}
		
		// Executing when the job does not finish yet.
		if(Info[Temp_PID].REMAIN >= 1 ){						// have Q time and job doesn't finish --
			 Info[Temp_PID].REMAIN--;
			 Temp_QT--;
		}
		
		// increate at
		at++;
		
		// check for exit
		if( Info[Temp_PID].REMAIN == 0 and Temp_PID > 0 ){
			
			//Keep last out previous at
			int Temp_OUT = 0;
			Temp_OUT = Info[Temp_PID].OUT;
			
			//exit from execute
			Info[Temp_PID].OUT = at;
//			printf("\nPID:|P%-3d|(in: %-3d) P%d (out: %-3d)", Temp_PID,Info[Temp_PID].IN, Temp_PID, Info[Temp_PID].OUT);
			printf("   P%-3d >", Temp_PID);
				
			// Calculation waiting time
			if(Info[Temp_PID].PS == 'A'){		//start
				Info[Temp_PID].WAITING = Info[Temp_PID].IN - Info[Temp_PID].AT;
//				printf("%10s","---start--");
				Info[Temp_PID].PS = 'S';
			}else{
//				printf("%10s"," ");
				Info[Temp_PID].WAITING += Info[Temp_PID].IN - Temp_OUT;
			}
//			printf(" : waiting : %-3d", Info[Temp_PID].WAITING );

			//*** check for terminate
			int check_break = 0;			
			for(int j = 1 ; j<= NProcess; j++ ){
				check_break += Info[j].REMAIN; 
			}
			
			if(check_break == 0 ){
				break;
			}	 
		}
	}
	
	//ShowAllQueue();
}